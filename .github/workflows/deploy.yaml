name: "Deploy Users üöÄüöÄ"

on: 
    workflow_dispatch:
    push:
        branches:
            - main

permissions:
  id-token: write
  contents: read

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: "Checkout repository ‚öíÔ∏è"
              uses: actions/checkout@v4
            - name: "‚öôÔ∏è Setup .NET 8"
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: 8.x
            - name: "Restore dependencies üó≥Ô∏è"
              run: dotnet restore ./UsersAuthorization.csproj
            - name: "Build project üèóÔ∏èüë∑‚Äç‚ôÄÔ∏è"
              run: dotnet build ./UsersAuthorization.csproj --no-restore
            - name: "Run Tests ‚úÖ‚úÖ"
              run: dotnet test ./UsersAuthorization.csproj --no-build --verbosity normal
    
    publish:
        needs: build
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        steps:
          - name: üõ†Ô∏è Checkout Repository
            uses: actions/checkout@v4

          - name: ‚öôÔ∏è Setup .NET 8 SDK
            uses: actions/setup-dotnet@v4
            with:
              dotnet-version: 8.x
          - name: "‚¨ÜÔ∏èLoad Env"
            run: |
              echo "ConnectionStrings__dbConnectionUsers=${{ secrets.DB_USERS }}" >> $GITHUB_ENV
              echo "APISettings__JwtOptions__Secret=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
              echo "APISettings__JwtOptions__Issuer=${{ secrets.JWT_ISSUER }}" >> $GITHUB_ENV
              echo "APISettings__JwtOptions__Audience=${{ secrets.JWT_AUDIENCE }}" >> $GITHUB_ENV
              echo "RabbitMQ__Host=${{ secrets.HOST_RABBIT }}" >> $GITHUB_ENV
              echo "RabbitMQ__Port=${{ secrets.PORT_RABBIT }}" >> $GITHUB_ENV
              echo "RabbitMQ__Username=${{ secrets.USERNAME_RABBIT }}" >> $GITHUB_ENV
              echo "RabbitMQ__Password=${{ secrets.PASSWORD_RABBIT }}" >> $GITHUB_ENV

          
          - name: üîÑ Replace Env Variables in Task Definition
            run: |
              envsubst < ./deployments/e-sports-revision1.json > ./deployments/e-sports-revision1-replaced.json
            env:
              DB_USERS: ${{ secrets.DB_USERS }}
              JWT_SECRET: ${{ secrets.JWT_SECRET }}
              JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
              JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
              HOST_RABBIT: ${{ secrets.HOST_RABBIT }}
              USERNAME_RABBIT: ${{ secrets.USERNAME_RABBIT }}
              PASSWORD_RABBIT: ${{ secrets.PASSWORD_RABBIT }}

          - name: üîê Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              role-skip-session-tagging: true
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-2

          - name: üîë Login to Amazon ECR
            run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

          - name: üì¶ Publish Docker Image to Amazon ECR
            working-directory: .
            run: |
              REPO="${{ secrets.REPOSITORY }}"
    
              if [[ -z "$REPO" ]]; then
                echo "Error: secrets.REPOSITORY is empty or is not configured correctly"
                exit 1
              fi
              
              echo "Using repository: $REPO"

              dotnet publish -c Release -r linux-x64 --self-contained false

              if [ ! -f "Dockerfile" ]; then
                echo "Error: Docker file not found in current directory."
                exit 1
              fi

              docker build  \
              --build-arg DB_USERS="${{ secrets.DB_USERS }}" \
              --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              --build-arg JWT_ISSUER="${{ secrets.JWT_ISSUER }}" \
              --build-arg JWT_AUDIENCE="${{ secrets.JWT_AUDIENCE }}" \
              --build-arg HOST_RABBIT="${{ secrets.HOST_RABBIT }}" \
              --build-arg USERNAME_RABBIT="${{ secrets.USERNAME_RABBIT }}" \
              --build-arg PASSWORD_RABBIT="${{ secrets.PASSWORD_RABBIT }}" \
              -t  "$REPO:latest" .
              
              docker push "$REPO:latest"

    deploy:
      needs: publish
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      runs-on: ubuntu-latest
      steps:
        - name: üõ†Ô∏è Checkout Repository
          uses: actions/checkout@v4

        - name: üîê Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2
        - name: üöÄ Deploy to Amazon ECS
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
            cluster: ESports
            task-definition: ./deployments/e-sports-revision1.json
            service: users-container
            wait-for-service-stability: true         
        - name: üìú Debug Verificar Task Definition
          run: cat ./deployments/e-sports-revision1.json